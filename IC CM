import React, { useMemo, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogTrigger } from "@/components/ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Calculator, CheckCircle2, XCircle } from "lucide-react";

/**
 * SKU Profitability Checker — Preloaded, Searchable Only + Innovations
 * -------------------------------------------------------------------
 * - All SKUs are preloaded in `catalogData`.
 * - The text box filters by SKU (and also Item Description for convenience).
 * - Click a row or type an exact SKU to see KPIs.
 * - KPIs show green/red based on thresholds below.
 * - "Add Innovation" lets users propose a custom item via a form modal.
 *   Includes a disclaimer and the ability to prefill from an existing SKU.
 * Fields per row:
 *   SKU, ItemDescription, CorrelatingNumber, FOB, Price, DutyRate, FreightRate, Handling, OtherVar, Other
 * Formulas:
 *   IC    = FOB + FOB*DutyRate + FOB*FreightRate + Handling + Other
 *   CM    = Price - IC - OtherVar
 *   CM%   = CM / Price
 */

// Preloaded catalog data (extend as needed)
const catalogData = [
  { SKU: "A100", ItemDescription: "Widget Basic",    CorrelatingNumber: "800123456789", FOB: 4.50, Price: 12.00, DutyRate: 0.05, FreightRate: 0.06, Handling: 0.15, OtherVar: 0.20, Other: 0.05 },
  { SKU: "B200", ItemDescription: "Gadget Pro",      CorrelatingNumber: "800987654321", FOB: 7.25, Price: 20.00, DutyRate: 0.03, FreightRate: 0.05, Handling: 0.18, OtherVar: 0.25, Other: 0.10 },
  { SKU: "C300", ItemDescription: "Accessory Lite",  CorrelatingNumber: "800555000111", FOB: 2.10, Price:  6.00, DutyRate: 0.00, FreightRate: 0.08, Handling: 0.12, OtherVar: 0.00, Other: 0.00 },
  { SKU: "D400", ItemDescription: "Device Max",      CorrelatingNumber: "800333222111", FOB:10.00, Price: 30.00, DutyRate: 0.04, FreightRate: 0.04, Handling: 0.20, OtherVar: 0.50, Other: 0.25 },
  { SKU: "E500", ItemDescription: "Premium Pack",    CorrelatingNumber: "800444333222", FOB:15.00, Price: 45.00, DutyRate: 0.06, FreightRate: 0.07, Handling: 0.25, OtherVar: 0.75, Other: 0.30 },
  { SKU: "F600", ItemDescription: "Widget XL",       CorrelatingNumber: "800111222333", FOB: 5.40, Price: 14.00, DutyRate: 0.05, FreightRate: 0.05, Handling: 0.15, OtherVar: 0.25, Other: 0.05 },
  { SKU: "G700", ItemDescription: "Gadget Mini",     CorrelatingNumber: "800222333444", FOB: 6.00, Price: 16.50, DutyRate: 0.03, FreightRate: 0.05, Handling: 0.16, OtherVar: 0.22, Other: 0.07 },
  { SKU: "H800", ItemDescription: "Accessory Pro",   CorrelatingNumber: "800333444555", FOB: 3.20, Price:  9.50, DutyRate: 0.02, FreightRate: 0.06, Handling: 0.12, OtherVar: 0.10, Other: 0.02 },
  { SKU: "I900", ItemDescription: "Device Core",     CorrelatingNumber: "800444555666", FOB: 8.90, Price: 24.00, DutyRate: 0.04, FreightRate: 0.05, Handling: 0.22, OtherVar: 0.40, Other: 0.18 },
  { SKU: "J010", ItemDescription: "Premium Duo",     CorrelatingNumber: "800555666777", FOB:12.00, Price: 36.00, DutyRate: 0.06, FreightRate: 0.07, Handling: 0.28, OtherVar: 0.80, Other: 0.32 },
  { SKU: "K020", ItemDescription: "Widget Nano",     CorrelatingNumber: "800666777888", FOB: 1.75, Price:  5.00, DutyRate: 0.00, FreightRate: 0.09, Handling: 0.10, OtherVar: 0.00, Other: 0.00 },
  { SKU: "L030", ItemDescription: "Gadget Ultra",    CorrelatingNumber: "800777888999", FOB: 9.75, Price: 28.00, DutyRate: 0.05, FreightRate: 0.05, Handling: 0.24, OtherVar: 0.55, Other: 0.20 },
];

function toPct(v)    { return (Number(v || 0) * 100).toFixed(1) + "%"; }
function money(v)    { return "$" + Number(v || 0).toFixed(2); }
function num(v)      { const n = Number(v); return Number.isFinite(n) ? n : 0; }

export default function App() {
  // Fixed thresholds (edit here if you want different lights)
  const TARGET_CM_DOLLARS = 2;   // green if CM ≥ $2
  const TARGET_CM_PERCENT = 60;  // green if CM% ≥ 60

  const [catalog, setCatalog] = useState(catalogData);
  const [query, setQuery] = useState("");
  const [selectedSKU, setSelectedSKU] = useState(null);

  // Innovation modal state
  const [openInnovation, setOpenInnovation] = useState(false);
  const [baseSku, setBaseSku] = useState("");
  const [form, setForm] = useState({
    SKU: "INNOV-" + Math.floor(Date.now() / 1000),
    ItemDescription: "",
    CorrelatingNumber: "",
    FOB: "",
    Price: "",
    DutyRate: "",
    FreightRate: "",
    Handling: "",
    OtherVar: "",
    Other: ""
  });

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    if (!q) return catalog.slice(0, 100);
    return catalog.filter(r =>
      r.SKU.toLowerCase().includes(q) ||
      (r.ItemDescription || "").toLowerCase().includes(q)
    ).slice(0, 100);
  }, [catalog, query]);

  const current = useMemo(() => {
    if (!selectedSKU && query.trim()) {
      const hit = catalog.find(r => r.SKU.toLowerCase() === query.trim().toLowerCase());
      if (hit) return hit;
    }
    if (!selectedSKU) return null;
    return catalog.find(r => r.SKU === selectedSKU) || null;
  }, [selectedSKU, query, catalog]);

  const result = useMemo(() => {
    if (!current) return null;
    const duty    = current.FOB * (current.DutyRate    || 0);
    const freight = current.FOB * (current.FreightRate || 0);
    const IC      = current.FOB + duty + freight + current.Handling + current.Other;
    const CM      = current.Price - IC - current.OtherVar;
    const CMPct   = current.Price > 0 ? (CM / current.Price) : 0;
    return { ...current, duty, freight, IC, CM, CMPct };
  }, [current]);

  const goodCM    = result ? result.CM >= TARGET_CM_DOLLARS : false;
  const goodCMPct = result ? (result.CMPct * 100) >= TARGET_CM_PERCENT : false;

  // Innovation helpers
  function loadFromExistingSku() {
    const found = catalog.find(r => r.SKU.toLowerCase() === baseSku.trim().toLowerCase());
    if (!found) return;
    setForm(f => ({
      ...f,
      ItemDescription: found.ItemDescription,
      CorrelatingNumber: found.CorrelatingNumber,
      FOB: found.FOB,
      Price: found.Price,
      DutyRate: found.DutyRate,
      FreightRate: found.FreightRate,
      Handling: found.Handling,
      OtherVar: found.OtherVar,
      Other: found.Other,
    }));
  }

  function saveInnovation() {
    const newSku = (form.SKU || "INNOV-" + Math.floor(Date.now()/1000)).trim();
    // Avoid accidental overwrite by making SKU unique if already exists
    let finalSku = newSku;
    let i = 1;
    while (catalog.some(r => r.SKU === finalSku)) {
      finalSku = `${newSku}-${i++}`;
    }
    const newItem = {
      SKU: finalSku,
      ItemDescription: (form.ItemDescription||"").trim() || "Innovation Item",
      CorrelatingNumber: (form.CorrelatingNumber||"").trim(),
      FOB: num(form.FOB),
      Price: num(form.Price),
      DutyRate: num(form.DutyRate),      // expect decimals (e.g., 0.05)
      FreightRate: num(form.FreightRate),
      Handling: num(form.Handling),
      OtherVar: num(form.OtherVar),
      Other: num(form.Other),
      __innovation: true,
    };
    setCatalog(prev => [newItem, ...prev]);
    setSelectedSKU(finalSku);
    setOpenInnovation(false);
    // reset form for next time
    setForm({
      SKU: "INNOV-" + Math.floor(Date.now() / 1000),
      ItemDescription: "",
      CorrelatingNumber: "",
      FOB: "",
      Price: "",
      DutyRate: "",
      FreightRate: "",
      Handling: "",
      OtherVar: "",
      Other: ""
    });
    setBaseSku("");
  }

  return (
    <div className="min-h-screen w-full bg-gradient-to-b from-slate-50 to-white p-6 md:p-10">
      <div className="mx-auto max-w-5xl space-y-6">
        <header className="flex items-start justify-between gap-4 flex-wrap">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold tracking-tight">SKU Profitability Checker</h1>
            <p className="text-slate-600 mt-1">
              All SKUs are preloaded. Type a SKU to search and click a row (or type an exact SKU) to view KPIs.
            </p>
          </div>

          {/* Add Innovation button + modal */}
          <Dialog open={openInnovation} onOpenChange={setOpenInnovation}>
            <DialogTrigger asChild>
              <Button className="rounded-xl">Add Innovation</Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-2xl">
              <DialogHeader>
                <DialogTitle>New Innovation</DialogTitle>
              </DialogHeader>
              <div className="text-xs text-red-600 bg-red-50 border border-red-200 rounded-lg p-3">
                Disclaimer: This entry is based on user input and is <strong>not approved by the company</strong>. Use for exploratory purposes only.
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-3">
                <div>
                  <Label>SKU</Label>
                  <Input value={form.SKU} onChange={(e)=>setForm({...form, SKU: e.target.value})} placeholder="INNOV-001" />
                </div>
                <div>
                  <Label>Item Description</Label>
                  <Input value={form.ItemDescription} onChange={(e)=>setForm({...form, ItemDescription: e.target.value})} placeholder="New concept item" />
                </div>
                <div>
                  <Label>Correlating #</Label>
                  <Input value={form.CorrelatingNumber} onChange={(e)=>setForm({...form, CorrelatingNumber: e.target.value})} placeholder="Optional" />
                </div>
                <div className="md:col-span-2 flex items-end gap-2">
                  <div className="flex-1">
                    <Label>Prefill from existing SKU</Label>
                    <Input value={baseSku} onChange={(e)=>setBaseSku(e.target.value)} placeholder="Type existing SKU, e.g., A100" />
                  </div>
                  <Button type="button" variant="outline" onClick={loadFromExistingSku}>Load</Button>
                </div>

                <div>
                  <Label>FOB</Label>
                  <Input inputMode="decimal" value={form.FOB} onChange={(e)=>setForm({...form, FOB: e.target.value})} placeholder="e.g., 4.50" />
                </div>
                <div>
                  <Label>Price</Label>
                  <Input inputMode="decimal" value={form.Price} onChange={(e)=>setForm({...form, Price: e.target.value})} placeholder="e.g., 12.00" />
                </div>
                <div>
                  <Label>Duty Rate (decimal)</Label>
                  <Input inputMode="decimal" value={form.DutyRate} onChange={(e)=>setForm({...form, DutyRate: e.target.value})} placeholder="e.g., 0.05 for 5%" />
                </div>
                <div>
                  <Label>Freight Rate (decimal)</Label>
                  <Input inputMode="decimal" value={form.FreightRate} onChange={(e)=>setForm({...form, FreightRate: e.target.value})} placeholder="e.g., 0.06 for 6%" />
                </div>
                <div>
                  <Label>Handling</Label>
                  <Input inputMode="decimal" value={form.Handling} onChange={(e)=>setForm({...form, Handling: e.target.value})} placeholder="e.g., 0.15" />
                </div>
                <div>
                  <Label>Other (fixed)</Label>
                  <Input inputMode="decimal" value={form.Other} onChange={(e)=>setForm({...form, Other: e.target.value})} placeholder="e.g., 0.05" />
                </div>
                <div className="md:col-span-2">
                  <Label>OtherVar (variable per unit)</Label>
                  <Input inputMode="decimal" value={form.OtherVar} onChange={(e)=>setForm({...form, OtherVar: e.target.value})} placeholder="e.g., 0.20" />
                </div>
              </div>

              <DialogFooter className="mt-4">
                <Button variant="outline" onClick={()=>setOpenInnovation(false)}>Cancel</Button>
                <Button onClick={saveInnovation}>Save Innovation</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </header>

        <Card className="rounded-2xl shadow-sm">
          <CardContent className="p-4 md:p-6">
            <Label htmlFor="sku">Search SKU</Label>
            <Input id="sku" placeholder="e.g., A100" value={query} onChange={(e)=>setQuery(e.target.value)} />
            <div className="max-h-64 overflow-auto rounded-xl border mt-3">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>SKU</TableHead>
                    <TableHead>Item Description</TableHead>
                    <TableHead>Correlating #</TableHead>
                    <TableHead className="text-right">FOB</TableHead>
                    <TableHead className="text-right">Price</TableHead>
                    <TableHead className="text-right">Duty%</TableHead>
                    <TableHead className="text-right">Freight%</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filtered.map(r => (
                    <TableRow
                      key={r.SKU}
                      className={selectedSKU===r.SKU ? "bg-slate-50" : "cursor-pointer hover:bg-slate-50"}
                      onClick={()=>setSelectedSKU(r.SKU)}
                    >
                      <TableCell className="font-medium">{r.SKU}{r.__innovation ? ' *' : ''}</TableCell>
                      <TableCell className="truncate max-w-[320px]" title={r.ItemDescription}>{r.ItemDescription}</TableCell>
                      <TableCell>{r.CorrelatingNumber}</TableCell>
                      <TableCell className="text-right">{money(r.FOB)}</TableCell>
                      <TableCell className="text-right">{money(r.Price)}</TableCell>
                      <TableCell className="text-right">{toPct(r.DutyRate)}</TableCell>
                      <TableCell className="text-right">{toPct(r.FreightRate)}</TableCell>
                    </TableRow>
                  ))}
                  {filtered.length === 0 && (
                    <TableRow>
                      <TableCell colSpan={7} className="text-center text-slate-500 py-6">No matches</TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>

        <Card className="rounded-2xl shadow-sm">
          <CardContent className="p-4 md:p-6">
            <div className="flex items-center gap-2 mb-3">
              <Calculator className="h-4 w-4" />
              <h3 className="font-semibold">KPI Results</h3>
            </div>

            {!result && <p className="text-sm text-slate-500">Select a SKU to see details.</p>}

            {result && (
              <div className="space-y-2">
                <p>
                  <strong>{result.ItemDescription}</strong> ({result.SKU}{result.__innovation ? ' *' : ''}) — {result.CorrelatingNumber}
                </p>
                {result.__innovation && (
                  <p className="text-xs text-red-600">* Innovation: user-entered data, not company approved.</p>
                )}
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="text-slate-500">IC (landed)</div>
                  <div className="font-medium">{money(result.IC)}</div>

                  <div className="flex items-center gap-1 text-slate-500">
                    CM {goodCM ? <CheckCircle2 className="text-green-600 h-4 w-4" /> : <XCircle className="text-red-600 h-4 w-4" />}
                  </div>
                  <div className={goodCM ? "text-green-600 font-bold" : "text-red-600 font-bold"}>
                    {money(result.CM)} <span className="ml-1 text-xs text-slate-500">(target ≥ ${TARGET_CM_DOLLARS.toFixed(2)})</span>
                  </div>

                  <div className="flex items-center gap-1 text-slate-500">
                    CM% {goodCMPct ? <CheckCircle2 className="text-green-600 h-4 w-4" /> : <XCircle className="text-red-600 h-4 w-4" />}
                  </div>
                  <div className={goodCMPct ? "text-green-600 font-bold" : "text-red-600 font-bold"}>
                    {toPct(result.CMPct)} <span className="ml-1 text-xs text-slate-500">(target ≥ {TARGET_CM_PERCENT}%)</span>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        <footer className="text-center text-xs text-slate-500 py-4">© {new Date().getFullYear()} — SKU KPI Calculator</footer>
      </div>
    </div>
  );
}
